name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1. build_lint_and_format_check Job: 가장 가볍고 빠르게 실행되는 코드 포맷팅 검사
  build_lint_and_format_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.12 and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to create .venv in project directory
        run: poetry config virtualenvs.in-project true

      - name: Poetry Cache (Only Core & Dev Deps for Formatting)
        # 포맷팅만 위한 최소한의 의존성만 캐싱
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-dev-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-dev-

      - name: Install Poetry dependencies (only core and dev for format check)
        # --with dev: Ruff를 위해 개발 의존성 설치
        # --without heavy: 무거운 의존성은 설치하지 않음
        run: poetry install --no-root --with dev --without heavy

      - name: Run Ruff Format Check
        # 오직 포맷팅 규칙만 검사하여 가장 빠른 피드백 제공
        run: poetry run ruff format . --check



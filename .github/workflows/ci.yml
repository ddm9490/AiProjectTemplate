# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1. build_lint_and_fast_tests Job: 항상 실행되는 빠른 품질 검사 및 경량 테스트
  build_lint_and_fast_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.12 and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: pip install poetry

      - name: Install Poetry dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-root --with dev

      - name: Run Ruff (Lint and Format Check)
        run: |
          poetry run ruff check .
          poetry run ruff format . --check

      - name: Run Pytest (Fast / Unit Tests)
        # 중요: 여기서는 torch 임포트 오버헤드가 없는 유닛 테스트만 실행
        # 예를 들어, tests/unit/utils 폴더에 있는 테스트만 포함
        run: |
          poetry run pytest tests/unit/utils/ # 특정 폴더 지정
          # 또는 tests/unit/ 내에서 torch가 필요 없는 특정 파일들을 지정
          # poetry run pytest tests/unit/data/test_data_processor.py tests/unit/config/test_config_loader.py

  # 2. run_heavy_tasks_and_integration_tests Job: `[skip ci]` 키워드가 없을 때만 실행되는 무거운 작업 및 통합 테스트
  run_heavy_tasks_and_integration_tests:
    needs: build_lint_and_fast_tests # 이전 Job이 성공해야만 실행
    runs-on: ubuntu-latest # 이 Job을 실행할 가상 환경 (GPU 필요 시 Self-hosted runner 고려)

    # 이 Job을 건너뛸 조건: 커밋 메시지에 "[skip ci]"가 포함되어 있을 경우
    if: >-
      !(contains(github.event.head_commit.message, '[skip ci]')) &&
      !(contains(github.event_name, 'pull_request') && (contains(github.event.pull_request.title, '[skip ci]') || contains(github.event.pull_request.body, '[skip ci]')) )

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install poetry

      - name: Install Poetry dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-root --with dev

      - name: Run Pytest (Heavy / Integration Tests)
        # 중요: 여기서는 torch 의존성이 있는 단위 테스트 (models, training)와 통합 테스트 실행
        run: |
          poetry run pytest tests/unit/models/ tests/unit/training/ tests/integration/ # 여러 폴더 지정

      - name: Run Training Script (Example - heavy operation, if applicable)
        # 실제 모델 학습 스크립트 실행 (GPU가 필요할 수 있음)
        # 이 단계는 CI에서 정말로 필요한지 팀과 논의하여 결정하세요.
        # 가벼운 smoke test 학습이라면 괜찮지만, 전체 학습은 피하는 것이 좋습니다.
        run: poetry run python scripts/main.py --mode train --config config/config.yaml --epochs 1 # 1 에포크만 돌리는 스모크 테스트

      - name: Upload Coverage Report (Optional)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: reports/coverage/
          retention-days: 5